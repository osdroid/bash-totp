#!/usr/bin/env bash

ENC_ALGORITHM='-aes-256-cbc -a'
declare -i TOTP_INTERVAL
declare -i TOTP_PERIOD
declare -i TOTP_DIGITS

if [ -z "$TOTP_SECRETS_PATH" -o ! -d "$TOTP_SECRETS_PATH" ]; then
    tput setaf 3; tput bold
    cat <<"EOF" 
---------------------------------------------------
| The secrets path was not found, set it with:    |
| export TOTP_SECRETS_PATH=$HOME/path/to/secrets  |
| and make sure the folder exists                 |
---------------------------------------------------
EOF
    tput sgr0
    exit 1
fi

showerr() {
    local msg=$1 exit=${2:-1}
    echo $'\e[1;31mERROR - '"$msg"$'\e[m'
    exit $exit
}

if [ "$#" -eq 1 -a ! -z "$1" ]; then
    service="$1"
else
    for file in "$TOTP_SECRETS_PATH"/*; do
	file=${file##*/}
	[ "$file" != '*' ] && history -s "$file"
    done
    read -ep 'Service: ' service
fi
file="$TOTP_SECRETS_PATH/$service"
if [ ! -e "$file" ]; then
    read -ep 'Service not found, create it? [y/N] ' create
    [ "$create" = y -o "$create" = Y ] || exit 0
    read -ep 'Secret: ' secret
    read -ep 'Interval: ' -i '30' interval
    read -ep 'Digits: ' -i '6' digits
    echo "otpauth $secret $interval $digits" | openssl enc $ENC_ALGORITHM > "$file"
    [ "$?" -ne 0 ] && exit
    unset secret
fi
[ ! -f "$file" ] && showerr 'Not a file'

secret_data=($(openssl enc $ENC_ALGORITHM -d -in "$file"))
if [ "$?" -ne 0 -o "${#secret_data[@]}" -lt 2 -o "${secret_data[0]}" != 'otpauth' ]; then
    showerr 'Invalid totp file, the password might have been incorrect' 2
fi

TOTP_SECRET=${secret_data[1]}
TOTP_INTERVAL=${secret_data[2]:-30}
TOTP_DIGITS=${secret_data[3]:-6}

TOTP_SECRET=${TOTP_SECRET^^}
TOTP_SECRET=$(tr -cd A-Z2-7= <<< "$TOTP_SECRET")

[ -z "$TOTP_SECRET" ] && showerr 'The secret is empty'
[ "$TOTP_INTERVAL" -le 0 ] && showerr 'The update interval must be a positive integer: '"${secret_data[2]}"

CURR_TIME=$(date +%s)
TOTP_PERIOD=$(( CURR_TIME / TOTP_INTERVAL ))
TOTP_REMAINING=$(( (TOTP_PERIOD + 1) * TOTP_INTERVAL - CURR_TIME ))

gen_digest() {
    local key=$1 period=$2
    printf "$(printf %016X "${period}" | sed 's/../\\x&/g')" |
	openssl dgst -sha1 -mac HMAC -macopt "hexkey:${key}" |
	cut -d\  -f2
}

gen_token() {
    local secret=$1 period=$2
    local key=$(echo "$secret" | base32 -d | hexdump -ve '/1 "%02X"')
    [ -z "$key" ] && exit 1
    # The digest is a 160-bit hexadecimal number string.
    local digest=$(gen_digest "${key}" "${period}")
    [ "${#digest}" -ne 40 ] && exit 2
    # Read the last 4 bits and convert it into an unsigned integer.
    local offset=$(( $(printf %d "0x${digest:39}") * 2 ))
    # Read a 32-bit positive integer and take at most N rightmost digits.
    local token=$(( (0x${digest:offset:8} & 0x7FFFFFFF) % (10 ** TOTP_DIGITS) ))
    # Pad the token number with leading zeros if needed.
    printf "%0${TOTP_DIGITS}d\n" "${token}"
}
token=$(gen_token "$TOTP_SECRET" "$TOTP_PERIOD")
echo -e "  ${TOTP_REMAINING}s...\e[1;34m $token \e[m"
unset secret_data
unset TOTP_SECRET
